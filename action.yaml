name: 'Setup Docker Cross-platform'
description: 'Installs Docker in Windows WSL and macOS Colima'

branding:
  icon: 'box'
  color: 'blue'

outputs:
  docker-host:
    description: 'Docker host connection string'
    value: ${{ steps.set-docker-host.outputs.docker-host }}

runs:
  using: 'composite'
  steps:
    - name: Check Platform Support
      id: check-support
      shell: bash
      run: |
        echo "🔍 Checking platform support..."
        echo "🖥️  OS: ${{ runner.os }}"
        echo "🏗️  Architecture: ${{ runner.arch }}"
        
        # Check if platform is supported
        case "${{ runner.os }}-${{ runner.arch }}" in
          "macOS-X64")
            echo "✅ macOS x86_64 is supported"
            ;;
          "macOS-ARM64")
            echo "❌ macOS ARM64 is not supported"
            exit 1
            ;;
          "Windows-X64")
            echo "✅ Windows x86_64 is supported"
            ;;
          "Windows-ARM64")
            echo "❌ Windows ARM64 is not supported"
            exit 1
            ;;
          *)
            echo "❌ Platform ${{ runner.os }}-${{ runner.arch }} is not supported"
            exit 1
            ;;
        esac

    # macOS - Use docker/setup-docker-action
    - name: 🍎 Install Docker on macOS
      if: runner.os == 'macOS'
      uses: docker/setup-docker-action@v4

    - name: 🔗 Ensure Docker is available in /usr/local/bin on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "🔗 Ensuring Docker is available in /usr/local/bin..."
        if [[ ! -e "/usr/local/bin/docker" ]]; then
          echo "Creating Docker symlink for persistent access..."
          sudo ln -s $(which docker) /usr/local/bin/docker
          echo "✅ Docker symlink created: /usr/local/bin/docker -> $(which docker)"
        else
          echo "ℹ️ Docker already available at /usr/local/bin/docker"
        fi

    # Windows - Setup WSL and install Docker
    - name: 🪟 Setup WSL for Windows
      if: runner.os == 'Windows'
      uses: Vampire/setup-wsl@v6
      with:
        distribution: Ubuntu-24.04
        wsl-shell-user: ubuntu
        wsl-conf: |
          [boot]
          systemd=true
          
          [interop]
          enabled=true
          appendWindowsPath=true
          
          [network]
          generateResolvConf=true

    - name: 🐳 Install Docker in WSL
      if: runner.os == 'Windows'
      shell: wsl-bash {0}
      run: |
        echo "🔄 Updating package index..."
        sudo apt-get update
        
        echo "📦 Installing required packages..."
        sudo apt-get install -y ca-certificates curl gnupg lsb-release
        
        echo "🔑 Adding Docker GPG key..."
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        
        echo "📋 Adding Docker repository..."
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        echo "🔄 Updating package index with Docker repo..."
        sudo apt-get update
        
        echo "🐳 Installing Docker..."
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        
        echo "🔧 Extending docker.socket to support TCP..."
        sudo mkdir -p /etc/systemd/system/docker.socket.d
        sudo tee /etc/systemd/system/docker.socket.d/tcp-listen.conf > /dev/null <<EOF
        [Socket]
        ListenStream=2375
        EOF
        
        echo "🚀 Starting Docker services..."
        sudo systemctl daemon-reload
        
        # Stop services to apply changes
        sudo systemctl stop docker || true
        sudo systemctl stop docker.socket || true
        
        # Start services
        sudo systemctl start docker.socket
        sudo systemctl start docker
        
        echo "👤 Adding user to docker group..."
        sudo usermod -aG docker ubuntu
        
        echo "✅ Docker installation completed!"
        
        # Test Docker installation
        echo "🧪 Testing Docker installation..."
        sudo docker --version
        sudo docker info

        echo "🌐 Testing both Unix and TCP sockets..."
        curl -s http://localhost:2375/version || echo "TCP socket not ready yet"

    # Set Docker Host environment variable
    - name: 🔧 Set Docker Host
      id: set-docker-host
      shell: bash
      run: |
        case "${{ runner.os }}" in
          "Windows")
            docker_host="tcp://localhost:2375"
            setx DOCKER_HOST "tcp://localhost:2375"
            echo "DOCKER_HOST=${docker_host}" >> $GITHUB_ENV
            echo "docker-host=${docker_host}" >> $GITHUB_OUTPUT
            echo "🌐 DOCKER_HOST set to: ${docker_host}"
            ;;
          "macOS"|"Linux")
            docker_host="unix:///var/run/docker.sock"
            echo "docker-host=${docker_host}" >> $GITHUB_OUTPUT
            echo "🌐 DOCKER_HOST using default: ${docker_host}"
            ;;
        esac

    # Test Docker installation (except for unsupported platforms)
    - name: 🧪 Test Docker Installation
      if: steps.check-support.outputs.supported == 'true'
      shell: bash
      run: |
        echo "🧪 Testing Docker installation..."
        
        # For Windows, test via WSL
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "🪟 Testing Docker in WSL..."
          wsl -d Ubuntu-24.04 -u ubuntu -- docker --version
          echo "✅ Docker is working in WSL!"
        else
          echo "🐳 Testing Docker directly..."
          docker --version
          docker info
          echo "🔍 Docker binary location: $(which docker)"
          echo "✅ Docker is working!"
        fi

    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true